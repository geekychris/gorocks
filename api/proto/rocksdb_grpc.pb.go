// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/rocksdb.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RocksDBService_Put_FullMethodName       = "/rocksdb.RocksDBService/Put"
	RocksDBService_Get_FullMethodName       = "/rocksdb.RocksDBService/Get"
	RocksDBService_Delete_FullMethodName    = "/rocksdb.RocksDBService/Delete"
	RocksDBService_StreamGet_FullMethodName = "/rocksdb.RocksDBService/StreamGet"
)

// RocksDBServiceClient is the client API for RocksDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RocksDBServiceClient interface {
	// Put stores a key-value pair in the specified database
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Get retrieves a value for a given key from the specified database
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Delete removes a key-value pair from the specified database
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// StreamGet retrieves multiple key-value pairs based on exact keys or prefix from the specified database
	StreamGet(ctx context.Context, in *StreamGetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamGetResponse], error)
}

type rocksDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRocksDBServiceClient(cc grpc.ClientConnInterface) RocksDBServiceClient {
	return &rocksDBServiceClient{cc}
}

func (c *rocksDBServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, RocksDBService_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocksDBServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, RocksDBService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocksDBServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, RocksDBService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rocksDBServiceClient) StreamGet(ctx context.Context, in *StreamGetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamGetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RocksDBService_ServiceDesc.Streams[0], RocksDBService_StreamGet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamGetRequest, StreamGetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RocksDBService_StreamGetClient = grpc.ServerStreamingClient[StreamGetResponse]

// RocksDBServiceServer is the server API for RocksDBService service.
// All implementations must embed UnimplementedRocksDBServiceServer
// for forward compatibility.
type RocksDBServiceServer interface {
	// Put stores a key-value pair in the specified database
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Get retrieves a value for a given key from the specified database
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Delete removes a key-value pair from the specified database
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// StreamGet retrieves multiple key-value pairs based on exact keys or prefix from the specified database
	StreamGet(*StreamGetRequest, grpc.ServerStreamingServer[StreamGetResponse]) error
	mustEmbedUnimplementedRocksDBServiceServer()
}

// UnimplementedRocksDBServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRocksDBServiceServer struct{}

func (UnimplementedRocksDBServiceServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedRocksDBServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRocksDBServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRocksDBServiceServer) StreamGet(*StreamGetRequest, grpc.ServerStreamingServer[StreamGetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGet not implemented")
}
func (UnimplementedRocksDBServiceServer) mustEmbedUnimplementedRocksDBServiceServer() {}
func (UnimplementedRocksDBServiceServer) testEmbeddedByValue()                        {}

// UnsafeRocksDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RocksDBServiceServer will
// result in compilation errors.
type UnsafeRocksDBServiceServer interface {
	mustEmbedUnimplementedRocksDBServiceServer()
}

func RegisterRocksDBServiceServer(s grpc.ServiceRegistrar, srv RocksDBServiceServer) {
	// If the following call pancis, it indicates UnimplementedRocksDBServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RocksDBService_ServiceDesc, srv)
}

func _RocksDBService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocksDBServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocksDBService_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocksDBServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocksDBService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocksDBServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocksDBService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocksDBServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocksDBService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RocksDBServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RocksDBService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RocksDBServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RocksDBService_StreamGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RocksDBServiceServer).StreamGet(m, &grpc.GenericServerStream[StreamGetRequest, StreamGetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RocksDBService_StreamGetServer = grpc.ServerStreamingServer[StreamGetResponse]

// RocksDBService_ServiceDesc is the grpc.ServiceDesc for RocksDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RocksDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rocksdb.RocksDBService",
	HandlerType: (*RocksDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _RocksDBService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RocksDBService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RocksDBService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGet",
			Handler:       _RocksDBService_StreamGet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/rocksdb.proto",
}
